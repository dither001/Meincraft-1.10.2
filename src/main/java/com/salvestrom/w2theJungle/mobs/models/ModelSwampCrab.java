// Date: 12/07/2014 00:30:08
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package com.salvestrom.w2theJungle.mobs.models;

import java.util.Random;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.util.math.MathHelper;

import com.salvestrom.w2theJungle.mobs.entity.EntitySwampCrab;

public class ModelSwampCrab extends ModelBase
{
	//mainbody
	ModelRenderer lowerbody;	ModelRenderer body;
	ModelRenderer mouth;
    ModelRenderer carapaceR;	ModelRenderer carapaceL;
    ModelRenderer leftEyeStalk;	ModelRenderer rightEyeStalk;

    //claws
    ModelRenderer forearmR;	ModelRenderer upperRarm;
    ModelRenderer forearmL;	ModelRenderer upperLarm;
    ModelRenderer clawRmain;
    ModelRenderer clawRmainsub;
    ModelRenderer clawRsub;	ModelRenderer clawRsub2;
    ModelRenderer clawLmain;
    ModelRenderer clawLmainsub;
    ModelRenderer clawLsub;	ModelRenderer clawLsub2;

    //walking legs left
    ModelRenderer upperRleg1;    ModelRenderer lowerRleg1;
    ModelRenderer upperRleg2;    ModelRenderer lowerRleg2;
    ModelRenderer upperRleg3;    ModelRenderer lowerRleg3;

    ModelRenderer upperLleg1;    ModelRenderer lowerLleg1;
    ModelRenderer upperLleg2;    ModelRenderer lowerLleg2;
    ModelRenderer upperLleg3;    ModelRenderer lowerLleg3;

    //swimming legs
    ModelRenderer lowerRleg4;    ModelRenderer upperRleg4;    ModelRenderer paddleR;
    ModelRenderer lowerLleg4;    ModelRenderer upperLleg4;    ModelRenderer paddleL;

    private float rads = 180F/(float)Math.PI;
	private Random rng = new Random();
  
  public ModelSwampCrab()
  {
    textureWidth = 128;
    textureHeight = 128;
    
      lowerbody = new ModelRenderer(this, 0, 0);
      lowerbody.addBox(-9F, -0F, -6F, 18, 6, 12);
      lowerbody.setRotationPoint(0F, 10F, 1F);
      lowerbody.setTextureSize(128, 128);
      lowerbody.mirror = true;
      setRotation(lowerbody, 0F, 0F, 0F);
      body = new ModelRenderer(this, 79, 22);
      body.addBox(-7F, -1F, 0F, 14, 8, 10);
      body.setRotationPoint(0F, -1F, -7F); //0 11 -6
      body.setTextureSize(128, 128);
      body.mirror = true;
      setRotation(body, 10/rads, 0F, 0F);
      mouth = new ModelRenderer(this, 84, 5);
      mouth.addBox(-3F, -3F, -8F, 6, 7, 3);
      mouth.setRotationPoint(0F, 0F, 7.1F); //0 8 1
      mouth.setTextureSize(128, 128);
      mouth.mirror = true;
      setRotation(mouth, 5/rads, 0F, 0F); //0.1745329F
      carapaceR = new ModelRenderer(this, 0, 98);
      carapaceR.addBox(0F, 0F, -8F, 11, 5, 15);
      carapaceR.setRotationPoint(-10.9F, -5.0F, 0F); //-10.9 5 1
      carapaceR.setTextureSize(128, 128);
      carapaceR.mirror = true;
      setRotation(carapaceR, -10/rads, 0F, -5/rads);
      carapaceL = new ModelRenderer(this, 53, 98);
      carapaceL.addBox(-11F, 0F, -8F, 11, 5, 15);
      carapaceL.setRotationPoint(10.8F, -5F, 0F); //-10.8 5 1
      carapaceL.setTextureSize(128, 128);
      carapaceL.mirror = true;
      setRotation(carapaceL, -10/rads, 0F, 5/rads);
      leftEyeStalk = new ModelRenderer(this, 60, 32);
      leftEyeStalk.addBox(-1F, -1F, -7F, 2, 2, 7);
      leftEyeStalk.setRotationPoint(-6.4F, 2.8F, -6.8F);
      leftEyeStalk.setTextureSize(128, 128);
      leftEyeStalk.mirror = true;
      setRotation(leftEyeStalk, -35/rads, -20/rads, 10/rads); //-0.7853982F, -0.3490659F, 0.2617994F);
      rightEyeStalk = new ModelRenderer(this, 60, 22);
      rightEyeStalk.addBox(-1F, -1F, -7F, 2, 2, 7);
      rightEyeStalk.setRotationPoint(6.4F, 2.8F, -6.8F);
      rightEyeStalk.setTextureSize(128, 128);
      rightEyeStalk.mirror = true;
      setRotation(rightEyeStalk, -35/rads, 20/rads, -10/rads);//-0.7853982F, 0.3490659F, -0.2617994F);

      upperRarm = new ModelRenderer(this, 16, 46);
      upperRarm.addBox(-6F, -2F, -2F, 6, 4, 4);
      upperRarm.setRotationPoint(-8F, 2.5F, -4F); //-8 12.5 -3
      upperRarm.setTextureSize(128, 128);
      upperRarm.mirror = true;
      setRotation(upperRarm, 0F, -0.5235988F, 0F);
      forearmR = new ModelRenderer(this, 8, 55);
      forearmR.addBox(-9F, -2.5F, -2.5F, 9, 5, 5);
      forearmR.setRotationPoint(-5F, -0F, -0F); //-12 12 -6
      forearmR.setTextureSize(128, 128);
      forearmR.mirror = true;
      setRotation(forearmR, 0F, -(0.8726646F-0.5235988F), 0F); //0.3490659F
      upperLarm = new ModelRenderer(this, 37, 46);
      upperLarm.mirror = true;
      upperLarm.addBox(0F, -2F, -2F, 6, 4, 4);
      upperLarm.setRotationPoint(8F, 2.5F, -4F); //8 12.5 -3
      upperLarm.setTextureSize(128, 128);
      upperLarm.mirror = true;
      setRotation(upperLarm, 0F, 0.5235988F, 0F);
      forearmL = new ModelRenderer(this, 37, 55);
      forearmL.mirror = true;
      forearmL.addBox(0F, -2.5F, -2.5F, 9, 5, 5);
      forearmL.setRotationPoint(4F, 0F, 0F); //12 12 -6
      forearmL.setTextureSize(128, 128);
      forearmL.mirror = true;
      setRotation(forearmL, 0F, (0.8726646F-0.5235988F), 0F);

      clawRmain = new ModelRenderer(this, 0, 66);
      clawRmain.addBox(-8F, -3F, -3F, 8, 6, 6);
      clawRmain.setRotationPoint(-6.3F, 0F, 0.65F); //-16.96, 12.42667, -10
      clawRmain.setTextureSize(128, 128);
      clawRmain.mirror = true;
      setRotation(clawRmain, 0F, -1.22173F+0.8726646F, 0F);
      clawRmainsub = new ModelRenderer(this, 0, 23);
      clawRmainsub.mirror = true;
      clawRmainsub.addBox(-9F, -2.5F, -2.5F, 9, 5, 5);
      clawRmainsub.setRotationPoint(-5.4F, 0F, 0.65F); //-19.96F, 12.04F, -15
      clawRmainsub.setTextureSize(128, 128);
      clawRmainsub.mirror = true;
      setRotation(clawRmainsub, 0F, -1.570796F+1.22173F, 0F);
      clawRsub = new ModelRenderer(this, 10, 79);
      clawRsub.addBox(-6F, -2F, -1.5F, 6, 4, 3);
      clawRsub.setRotationPoint(-6.4F, 0F, -1.6F); //-15.96F, 12.52F, -11F
      clawRsub.setTextureSize(128, 128);
      clawRsub.mirror = true;
      setRotation(clawRsub, 0F, -60/rads, 0F);
      clawRsub2 = new ModelRenderer(this, 0, 35);
      clawRsub2.mirror = true;
      clawRsub2.addBox(-5F, -1.5F, -1.5F, 5, 3, 3);
      clawRsub2.setRotationPoint(-4.9F, 0F, 0F); //-14.57333F, 12.97333F, -16F
      clawRsub2.setTextureSize(128, 128);
      clawRsub2.mirror = true;
      setRotation(clawRsub2, 0F, 20/rads, 0F);

      clawLmain = new ModelRenderer(this, 37, 66);
      clawLmain.mirror = true;
      clawLmain.addBox(0F, -3F, -3F, 8, 6, 6);
      clawLmain.setRotationPoint(6.3F, 0F, 0.65F);
      clawLmain.setTextureSize(128, 128);
      clawLmain.mirror = true;
      setRotation(clawLmain, 0F, 20/rads, 0F);
      clawLmainsub = new ModelRenderer(this, 0, 23);
      clawLmainsub.addBox(0F, -2.5F, -2.5F, 9, 5, 5);
      clawLmainsub.setRotationPoint(5.4F, 0F, 0.65F);
      clawLmainsub.setTextureSize(128, 128);
      clawLmainsub.mirror = true;
      setRotation(clawLmainsub, 0F, 20/rads, 0F);
      clawLsub = new ModelRenderer(this, 37, 79);
      clawLsub.mirror = true;
      clawLsub.addBox(0F, -2F, -1.5F, 6, 4, 3);
      clawLsub.setRotationPoint(6.4F, 0F, -1.6F);
      clawLsub.setTextureSize(128, 128);
      clawLsub.mirror = true;
      setRotation(clawLsub, 0F, 60/rads, 0F);
      clawLsub2 = new ModelRenderer(this, 0, 35);
      clawLsub2.mirror = true;
      clawLsub2.addBox(0F, -1.5F, -1.5F, 5, 3, 3);
      clawLsub2.setRotationPoint(4.9F, 0F, 0F);
      clawLsub2.setTextureSize(128, 128);
      clawLsub2.mirror = true;
      setRotation(clawLsub2, 0F, -20/rads, 0F);
      
      upperRleg1 = new ModelRenderer(this, 75, 0);
      upperRleg1.addBox(-10F, -1F, -1F, 10, 2, 2);
      upperRleg1.setRotationPoint(-8F, 5F, -1F); //-8 15 -1
      upperRleg1.setTextureSize(128, 128);
      upperRleg1.mirror = true;
      setRotation(upperRleg1, 0F, -0.1745329F, 0.3490659F);
      upperRleg2 = new ModelRenderer(this, 75, 0);
      upperRleg2.addBox(-10F, -1F, -1F, 10, 2, 2);
      upperRleg2.setRotationPoint(-8F, 5F, 1F); //-8 15 1
      upperRleg2.setTextureSize(128, 128);
      upperRleg2.mirror = true;
      setRotation(upperRleg2, 0F, 0.122173F, 0.3490659F);
      upperRleg3 = new ModelRenderer(this, 75, 0);
      upperRleg3.addBox(-10F, -1F, -1F, 10, 2, 2);
      upperRleg3.setRotationPoint(-7F, 5F, 3F); //-7 15 3
      upperRleg3.setTextureSize(128, 128);
      upperRleg3.mirror = true;
      setRotation(upperRleg3, 0F, 0.4363323F, 0.3490659F);
      upperRleg4 = new ModelRenderer(this, 91, 74);
      upperRleg4.mirror = true;
      upperRleg4.addBox(-6F, -1F, -1F, 6, 2, 2);
      upperRleg4.setRotationPoint(-7F, 4.6F, 5F); //-7 14.6 6
      upperRleg4.setTextureSize(128, 128);
      upperRleg4.mirror = true;
      setRotation(upperRleg4, 0F, 0.8726646F, 0.1047198F);

      upperLleg1 = new ModelRenderer(this, 101, 0);
      upperLleg1.addBox(0F, -1F, -1F, 10, 2, 2);
      upperLleg1.setRotationPoint(8F, 5F, -1F); // 8 15 -1
      upperLleg1.setTextureSize(128, 128);
      upperLleg1.mirror = true;
      setRotation(upperLleg1, 0F, 0.1745329F, -0.3490659F);
      upperLleg2 = new ModelRenderer(this, 101, 0);
      upperLleg2.addBox(0F, -1F, -1F, 10, 2, 2);
      upperLleg2.setRotationPoint(8F, 5F, 1F); //8 15 1
      upperLleg2.setTextureSize(128, 128);
      upperLleg2.mirror = true;
      setRotation(upperLleg2, 0F, -0.122173F, -0.3490659F);
      upperLleg3 = new ModelRenderer(this, 101, 0);
      upperLleg3.addBox(0F, -1F, -1F, 10, 2, 2);
      upperLleg3.setRotationPoint(7F, 5F, 3F); //7 15 3
      upperLleg3.setTextureSize(128, 128);
      upperLleg3.mirror = true;
      setRotation(upperLleg3, 0F, -0.4363323F, -0.3490659F);
      upperLleg4 = new ModelRenderer(this, 91, 74);
      upperLleg4.addBox(0F, -1F, -1F, 6, 2, 2);
      upperLleg4.setRotationPoint(7F, 4.6F, 5F); //7 14.6 6
      upperLleg4.setTextureSize(128, 128);
      upperLleg4.mirror = true;
      setRotation(upperLleg4, 0F, -0.8726646F, -0.1047198F);

      lowerLleg1 = new ModelRenderer(this, 37, 88);
      lowerLleg1.addBox(0F, -1.5F, -1.5F, 15, 3, 3);
      lowerLleg1.setRotationPoint(8.7F, 0F, 0F);
      lowerLleg1.setTextureSize(128, 128);
      lowerLleg1.mirror = true;
      setRotation(lowerLleg1, 0F, 0F, 70/rads);
      lowerLleg2 = new ModelRenderer(this, 37, 88);
      lowerLleg2.addBox(0F, -1.5F, -1.5F, 15, 3, 3);
      lowerLleg2.setRotationPoint(8.7F, 0F, 0F);
      lowerLleg2.setTextureSize(128, 128);
      lowerLleg2.mirror = true;
      setRotation(lowerLleg2, 0F, 0, 70/rads);
      lowerLleg3 = new ModelRenderer(this, 37, 88);
      lowerLleg3.addBox(0F, -1.5F, -1.5F, 15, 3, 3);
      lowerLleg3.setRotationPoint(8.7F, 0F, 0F);
      lowerLleg3.setTextureSize(128, 128);
      lowerLleg3.mirror = true;
      setRotation(lowerLleg3, 0F, 0, 70/rads);
      lowerLleg4 = new ModelRenderer(this, 74, 66);
      lowerLleg4.addBox(-2F, -1F, 0F, 3, 2, 5);
      lowerLleg4.setRotationPoint(5.5F, 0F, -1F);
      lowerLleg4.setTextureSize(128, 128);
      lowerLleg4.mirror = true;
      setRotation(lowerLleg4, -31/rads, 55/rads, 0);//-0.4363323F, 0.0872665F, 0F); //rotate Z for swimming
      paddleL = new ModelRenderer(this, 74, 55);
      paddleL.addBox(-3F, -1F, 0F, 4, 2, 8);
      paddleL.setRotationPoint(0F, 0.1F, 4.5F);
      paddleL.setTextureSize(128, 128);
      paddleL.mirror = true;
      setRotation(paddleL, 0, -17/rads, 0); //-0.5235988F, -0.2094395F, 0.1745329F);
      
      lowerRleg1 = new ModelRenderer(this, 0, 88);
      lowerRleg1.addBox(-15F, -1.5F, -1.5F, 15, 3, 3);
      lowerRleg1.setRotationPoint(-8.7F, 0F, 0F); //-16 12 -2
      lowerRleg1.setTextureSize(128, 128);
      lowerRleg1.mirror = true;
      setRotation(lowerRleg1, 0F, 0, -70/rads); //y-0.1745329 z-0.8726646F);
      lowerRleg2 = new ModelRenderer(this, 0, 88);
      lowerRleg2.addBox(-15F, -1.5F, -1.5F, 15, 3, 3);
      lowerRleg2.setRotationPoint(-8.7F, 0F, 0F);
      lowerRleg2.setTextureSize(128, 128);
      lowerRleg2.mirror = true;
      setRotation(lowerRleg2, 0F, 0, -70/rads);
      lowerRleg3 = new ModelRenderer(this, 0, 88);
      lowerRleg3.addBox(-15F, -1.5F, -1.5F, 15, 3, 3);
      lowerRleg3.setRotationPoint(-8.7F, 0F, 0F);
      lowerRleg3.setTextureSize(128, 128);
      lowerRleg3.mirror = true;
      setRotation(lowerRleg3, 0F, 0, -70/rads);
      lowerRleg4 = new ModelRenderer(this, 91, 66);
      lowerRleg4.mirror = true;
      lowerRleg4.addBox(-1F, -1F, 0F, 3, 2, 5);
      lowerRleg4.setRotationPoint(-5.5F, 0F, -1F);
      lowerRleg4.setTextureSize(128, 128);
      lowerRleg4.mirror = true;
      setRotation(lowerRleg4, -31/rads, -55/rads, 0); //-0.4363323F, -0.0872665F, 0F);
      paddleR = new ModelRenderer(this, 99, 55);
      paddleR.mirror = true;
      paddleR.addBox(-1F, -1F, 0F, 4, 2, 8);
      paddleR.setRotationPoint(0F, 0.1F, 4.5F);
      paddleR.setTextureSize(128, 128);
      paddleR.mirror = true;
      setRotation(paddleR, 0, 17/rads, 0); //-0.5235988F, 0.2094395F, -0.1745329F);
      
      this.lowerbody.addChild(body);    	this.body.addChild(mouth);
      this.lowerbody.addChild(carapaceL);	this.lowerbody.addChild(carapaceR);
      this.carapaceL.addChild(leftEyeStalk);this.carapaceR.addChild(rightEyeStalk);

      this.lowerbody.addChild(upperLarm);	this.lowerbody.addChild(upperRarm);
      this.upperLarm.addChild(forearmL);	this.upperRarm.addChild(forearmR);
      this.forearmL.addChild(clawLmain);	this.forearmR.addChild(clawRmain);
      this.clawLmain.addChild(clawLmainsub);this.clawRmain.addChild(clawRmainsub);
      this.forearmL.addChild(clawLsub);		this.forearmR.addChild(clawRsub);
      this.clawLsub.addChild(clawLsub2);	this.clawRsub.addChild(clawRsub2);
      
      this.lowerbody.addChild(upperLleg1);	this.lowerbody.addChild(upperRleg1);
      this.lowerbody.addChild(upperLleg2);	this.lowerbody.addChild(upperRleg2);
      this.lowerbody.addChild(upperLleg3);	this.lowerbody.addChild(upperRleg3);
      this.lowerbody.addChild(upperLleg4);	this.lowerbody.addChild(upperRleg4);
      
      this.upperLleg1.addChild(lowerLleg1);	this.upperRleg1.addChild(lowerRleg1);
      this.upperLleg2.addChild(lowerLleg2);	this.upperRleg2.addChild(lowerRleg2);
      this.upperLleg3.addChild(lowerLleg3);	this.upperRleg3.addChild(lowerRleg3);
      this.upperLleg4.addChild(lowerLleg4);	this.upperRleg4.addChild(lowerRleg4);
 
      this.lowerLleg4.addChild(paddleL);	this.lowerRleg4.addChild(paddleR);
      
      
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    lowerbody.render(f5);
   }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float time, float motion, float age, float f3, float f4, float f5, Entity ntt) {
	  super.setRotationAngles(time, motion, age, f3, f4, f5, ntt);
	  
	  //walking
	  //-(0.5F * MathHelper.sin(0.5F + time * r) * motion) + base angle.
	  float o1 = 0;
	  float o2 = 0.6F;
	  float o3 = 1.2F;
	  float o4 = 1.8F;
	  float o5 = -1.2F;
	  float o6 = 0.7F;
	  
	  EntitySwampCrab crab = (EntitySwampCrab)ntt;
	  int clawSnaps = crab.getAnimTimer();
	  float range = 0.02F; //of movement
	  int over = crab.getKnockedOver();
	  float overAdjust = over/rads/2.9f;
	  int attackTimer = crab.attackTimer;
	  
	  //System.out.println(attackTimer);
	  
	  //time = age *0.15F;
	  //motion = 0.6F;

	  if(over > 0)
	  {
		  //have this roll mob to a max of -165
		  this.lowerbody.rotateAngleX = (0.45F * MathHelper.sin(age/5f * 0.85f)) - 165/rads; //0.5legAnimation(1, age/5f) - 165/rads;
		  this.lowerbody.rotationPointY = 20;
		  
		  float m1 = 1.5f;
		  
		  this.upperLleg1.rotateAngleZ = legAnimation(o2*m1, age/2) - 0.3490659F + overAdjust;
		  this.lowerLleg1.rotateAngleZ = legAnimation(-o2*m1, age/2) + 70/rads + overAdjust;

		  this.upperLleg2.rotateAngleZ = legAnimation(o4*m1, age/2) - 0.3490659F  + overAdjust;
		  this.lowerLleg2.rotateAngleZ = legAnimation(o2*m1, age/2) + 70/rads  + overAdjust;

		  this.upperLleg3.rotateAngleZ = legAnimation(-o2*m1, age/2) - 0.3490659F  + overAdjust;
		  this.lowerLleg3.rotateAngleZ = legAnimation(-o4*m1, age/2) + 70/rads  + overAdjust;
		  
		  this.upperRleg1.rotateAngleZ = -legAnimation(o2-o5*m1, age/2) + 0.3490659F  - overAdjust;
		  this.lowerRleg1.rotateAngleZ = legAnimation(-o2-o5*m1, age/2) - 70/rads - overAdjust;
		  
		  this.upperRleg2.rotateAngleZ = -legAnimation(o4-o5*m1, age/2) + 0.3490659F - overAdjust;
		  this.lowerRleg2.rotateAngleZ = legAnimation(o2-o5*m1, age/2) - 70/rads - overAdjust;
		  	  
		  this.upperRleg3.rotateAngleZ = -(legAnimation(-o2-o5*m1, age/2) - 0.3490659F) - overAdjust;
		  this.lowerRleg3.rotateAngleZ = legAnimation(-o4-o5*m1, age/2) - 70/rads - overAdjust;
		  }
	  else
	  {
		  this.lowerbody.rotateAngleX = 0;
		  this.lowerbody.rotationPointY = 10;
		  
		  this.upperLleg1.rotateAngleZ = legAnimation(o2, time) * (motion*o6) - 0.3490659F + overAdjust;
		  this.lowerLleg1.rotateAngleZ = legAnimation(-o2, time) * (motion*o6) + 70/rads + overAdjust;

		  this.upperLleg2.rotateAngleZ = legAnimation(o4, time) * (motion*o6) - 0.3490659F  + overAdjust;
		  this.lowerLleg2.rotateAngleZ = legAnimation(o2, time) * (motion*o6) + 70/rads  + overAdjust;
		  
		  this.upperLleg3.rotateAngleZ = legAnimation(-o2, time) * (motion*o6) - 0.3490659F  + overAdjust;
		  this.lowerLleg3.rotateAngleZ = legAnimation(-o4, time) * (motion*o6) + 70/rads  + overAdjust;
		  
		  this.upperRleg1.rotateAngleZ = -legAnimation(o2-o5, time) * (motion*o6) + 0.3490659F  - overAdjust;
		  this.lowerRleg1.rotateAngleZ = legAnimation(-o2-o5, time) * (motion*o6) - 70/rads - overAdjust;
		  
		  this.upperRleg2.rotateAngleZ = -legAnimation(o4-o5, time) * (motion*o6) + 0.3490659F - overAdjust;
		  this.lowerRleg2.rotateAngleZ = legAnimation(o2-o5, time) * (motion*o6) - 70/rads - overAdjust;
		  
		  this.upperRleg3.rotateAngleZ = -(legAnimation(-o2-o5, time) * (motion*o6) - 0.3490659F) - overAdjust;
		  this.lowerRleg3.rotateAngleZ = legAnimation(-o4-o5, time) * (motion*o6) - 70/rads - overAdjust;
		  
		  this.upperLleg1.rotateAngleY = 0.2245329F; //0.1745329F;
		  this.upperRleg1.rotateAngleY = -0.2245329F;
		  }
	  
	  //fer rotating while walking/attacking
	  if(motion > 0)
	  {
		  this.lowerbody.rotateAngleY = +90/rads;
		  
		  if(attackTimer > 0) {
			  this.lowerbody.rotateAngleY = 0/rads;
		  }
	  }
	  else
	  {
		  this.lowerbody.rotateAngleY = 0;
		  }
	  
	  //claws	    
  	  this.forearmL.rotateAngleY = (float) (MathHelper.sin((float) (-1F + (age / 2/Math.PI))) * range)+20/rads;
	  this.clawLmain.rotateAngleY = (float) (MathHelper.sin((float) (-1.6F + (age / 2/Math.PI))) * range)+20/rads;
  
	  if(attackTimer > 0) {
		  this.upperLarm.rotateAngleY = (float) (MathHelper.sin((float) (age / 2/Math.PI)) * range)
				  +0.5235988F-motion + 1.2f*attackTimer/rads;
		  this.upperRarm.rotateAngleY = (MathHelper.sin((float)(age/2/Math.PI)) * range)
				  -0.5235988F+motion - 1.2f*attackTimer/rads;
	  } else {
		  this.upperLarm.rotateAngleY = (float) (MathHelper.sin((float) (age / 2/Math.PI)) * range * over/2)+0.5235988F-motion;
		  this.upperRarm.rotateAngleY = (float) (MathHelper.sin((float) (age / 2/Math.PI)) * range * over/2)-0.5235988F+motion;
		  
		  this.upperLarm.rotateAngleX = 0.5235988F + -motion*3.5f;//+35/rads;
		  this.upperRarm.rotateAngleX = +35/rads + -motion*3.5f;

		  if(this.upperLarm.rotateAngleX < -0.5235988F)
		  {
			  this.upperLarm.rotateAngleX = -0.5235988f;
			  }// + -motion*3.5f;//+35/rads;
		  if(this.upperRarm.rotateAngleX < -0.5235988F)
		  {
			  this.upperRarm.rotateAngleX = -0.5235988f;
			  }// + -motion*3.5f;//+35/rads;
		  
		  this.upperLarm.rotateAngleZ = -motion * 1f;// +35/rads;
		  this.upperRarm.rotateAngleZ = +motion * 1f;// +35/rads;
	  }
	  
  	  this.forearmR.rotateAngleY = (float) (MathHelper.sin((float) (-1F + (age / 2/Math.PI))) * range)-20/rads;
	  this.clawRmain.rotateAngleY = (float) (MathHelper.sin((float) (-1.6F + (age / 2/Math.PI))) * range)-20/rads;
	  
	  //rear paddles
	  this.upperRleg4.rotateAngleZ = 0.1F + motion;//-(float) (MathHelper.sin((float) (age / Math.PI)*0.8F) * range)+0.1047198F-motion;
	  this.upperLleg4.rotateAngleZ = 0.1F + motion; //-(float) (MathHelper.sin((float) (age / Math.PI)*0.8F) * range)-0.1047198F+motion;

	  this.upperRleg4.rotateAngleY = -(float) (MathHelper.sin((float) (age / Math.PI)*0.8F) * range * 2)+0.8726646F;//+motion;
	  this.upperLleg4.rotateAngleY = (float) (MathHelper.sin((float) (age / Math.PI)*0.8F) * range * 2)-0.8726646F;//-motion;
	  
	  this.upperRleg4.rotateAngleX = 0;//+motion;
	  this.upperLleg4.rotateAngleX = 0;//+motion;


	  if (clawSnaps > 0) {
		  range = 0.3F;
		  this.clawLsub.rotateAngleY = (float) (MathHelper.sin((float) -((clawSnaps / 2/Math.PI))*3F) * range)+60/rads;
		  this.clawRsub.rotateAngleY = (float) (MathHelper.sin((float) ((clawSnaps / 2/Math.PI))*3F) * range)-60/rads;
		  //crab.playSound("random.wood_click", 3.7F, 1.5F);
		  //--clawSnaps;

		  } else {
			  this.clawLsub.rotateAngleY = (float) (MathHelper.sin((float) (-2.2F + (age / 2/Math.PI))) * range)+60/rads;
			  this.clawRsub.rotateAngleY = (float) (MathHelper.sin((float) (-2.2F + (age / 2/Math.PI))) * range)-60/rads;
			  }
	  
	  //head
	  this.leftEyeStalk.rotateAngleX = (f3/ (270F/(float)Math.PI)) * 0.5F - 38/rads;
	  this.leftEyeStalk.rotateAngleY = (f3 / (270F/(float)Math.PI)) * 0.5F;
	  //this.leftEyeStalk.rotateAngleZ = (f3 / (240F / (float)Math.PI)) * 0.5F;

	  this.rightEyeStalk.rotateAngleX = (f3/ (270F/(float)Math.PI)) * 0.5F - 38/rads;
	  this.rightEyeStalk.rotateAngleY = (f3 / (270F/(float)Math.PI)) * 0.5F;
	 // this.rightEyeStalk.rotateAngleZ = (f3 / (240F / (float)Math.PI)) * 0.5F;
	  
	  }
  
  public void setLivingAnimations(EntityLivingBase par1EntityLivingBase, float time, float speed, float par4)
  {
	  
	  
	  
  }
  
  public float legAnimation(float waveOffset, float time) {
	  
	  float r = 0.7F; //frequency modifier (swing speed)
	  float w = waveOffset;
	  return (0.75F * MathHelper.sin(w + time * r)); //0.5
  }

}
